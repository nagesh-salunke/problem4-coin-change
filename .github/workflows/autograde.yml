name: Autograde Java

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Compile Solution.java
        run: javac Solution.java

      - name: Run Public Tests
        run: |
          set -e
          mkdir -p results
          for infile in tests/*.in; do
            outfile="results/$(basename $infile .in).out"
            java Solution < "$infile" > "$outfile"

            # Normalize output
            tr -d '\r' < "$outfile" | sed '/^$/d' > "${outfile}.norm"
            tr -d '\r' < "tests/$(basename $infile .in).out" | sed '/^$/d' > "tests/$(basename $infile .in).out.norm"

            if diff -q "${outfile}.norm" "tests/$(basename $infile .in).out.norm"; then
              echo "✅ $(basename $infile) passed"
            else
              echo "❌ $(basename $infile) failed"
              echo "Input:"
              cat "$infile"
              echo "Expected:"
              cat "tests/$(basename $infile .in).out.norm"
              echo "Got:"
              cat "${outfile}.norm"
              exit 1
            fi
          done

      - name: Run Hidden Tests
        env:
          HIDDEN_REPO_TOKEN: ${{ secrets.HIDDEN_REPO_TOKEN }}
        run: |
          set -e
          mkdir -p hidden_tests results

          # Clone private repo with hidden tests
          git clone https://x-access-token:${HIDDEN_REPO_TOKEN}@github.com/nagesh-salunke/psp-eval-sept27-problem-4-hidden-tests.git hidden_tests

          for infile in hidden_tests/*.in; do
            outfile="results/$(basename $infile .in).out"
            java Solution < "$infile" > "$outfile"

            tr -d '\r' < "$outfile" | sed '/^$/d' > "${outfile}.norm"
            tr -d '\r' < "hidden_tests/$(basename $infile .in).out" | sed '/^$/d' > "hidden_tests/$(basename $infile .in).out.norm"

            if diff -q "${outfile}.norm" "hidden_tests/$(basename $infile .in).out.norm"; then
              echo "✅ $(basename $infile) passed"
            else
              echo "❌ $(basename $infile) failed"
              echo "Input:"
              cat "$infile"
              echo "Expected:"
              cat "hidden_tests/$(basename $infile .in).out.norm"
              echo "Got:"
              cat "${outfile}.norm"
              exit 1
            fi
          done
